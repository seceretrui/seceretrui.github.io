<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[springboot-JPA]]></title>
    <url>%2F2019%2F09%2F29%2Fspringboot-JPA%2F</url>
    <content type="text"><![CDATA[初识springboot JPAJPA概念 JPA(Java Persistence API)是Sun官方提出的Java持久化规范，用来方便大家操作数据库。真正干活的可能是Hibernate,TopLink等等实现了JPA规范的不同厂商,默认是Hibernate。 创建数据表123456789create database jpaTest;use jpaTest;create table category_ ( id int(14) not null auto_increment, name varchar(30), primary key(id)) insert into category_ values(null,&apos;category 1&apos;);insert into category_ values(null,&apos;category 2&apos;); 创建springboot项目以Maven的方式创建springboot项目 application.properties添加配置文件1234567spring.mvc.view.prefix=/WEB-INF/jsp/spring.mvc.view.suffix=.jspspring.datasource.url=jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=adminspring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.jpa.properties.hibernate.hbm2ddl.auto=update pom.xml添加依赖文件123456789101112&lt;!-- mysql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.21&lt;/version&gt; &lt;/dependency&gt; &lt;!-- jpa --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; 创建springboot启动类12345678@SpringBootApplicationpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125; &#125; ​ 创建模型类Category12345678910111213141516171819202122232425262728@Entity@Table(name="category_")public class Category &#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name="id") private int id; @Column(name="name") private String name; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; &#125; 创建DAO类CategoryDAO1public interface CategoryDAO extends JpaRepository&lt;Category,Integer&gt; &#123;&#125; 创建Controller类CategoryController12345678910111213@Controllerpublic class CategoryController &#123; @Autowired CategoryDAO categoryDAO; @RequestMapping("/listCategory") public String listCategory(Model m) throws Exception &#123; List&lt;Category&gt; cs = categoryDAO.findAll(); m.addAttribute("cs", cs); return "listCategory"; &#125;&#125; 创建显示页面listCategory.jsp1234567891011121314151617&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%&gt;&lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;c:forEach items="$&#123;cs&#125;" var="c" varStatus="st"&gt; &lt;tr&gt; &lt;td&gt;$&#123;c.id&#125;&lt;/td&gt; &lt;td&gt;$&#123;c.name&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/table&gt; 运行启动类打开浏览器验证总结：通过继承JpaRepository，我们不用自已再去实现crud等方法，直接调用JpaRepository给我们的方法就行了。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python正则备忘]]></title>
    <url>%2F2019%2F05%2F27%2Fpython%E6%AD%A3%E5%88%99%E5%A4%87%E5%BF%98%2F</url>
    <content type="text"><![CDATA[python正则备忘python正则常用方法python通过re模块实现了完整的正则表达示，通过import re引入 参数pattern –匹配模式string –原字符串flags –可选标志 查找字符串re.match(pattern, string, flags=0)仅匹配开头，成功返回re.Match object,失败则返回None re.search(pattern, string, flags=0)匹配整个字符串仅一次只要成功就不再匹配后面，成功返回re.Match object,若失败则返回None pattern.findall(string[, pos[, endpos]])匹配整个字符串所有符合匹配模式的字符串，返回re.Match object,失败返回None re.finditer(pattern, string, flags=0)匹配整个字符串，返回可迭代对像，匹配成功可迭代re.Match object, 匹配失败为None 替换字符串re.sub(patttern, repl, string, count=0, flags=0)将模式匹配字符串替换为repl中的字符串 re.split(pattern, string[, maxsplit=0, flags=0])将字符串按模式匹配分割 正则表达示对像re.Match objectobject.span() 返回匹配的索引元组object.group() 返回匹配的字符串object.start() 返回开始索引object.end() 返回结束索引 re.compile生成pattern对像，用以描述要匹配的字符串]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我的软件清单]]></title>
    <url>%2F2019%2F05%2F13%2F%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%2F</url>
    <content type="text"><![CDATA[日常使用随着电脑用的时间越来越久，软件也装的越来越多，看见好玩的，都会下载下来，虽然不久就遗忘了或卸载了，但随着电脑重装次数的变多，装这些软件都够费时间的，所以整理一下。 通讯类: qq, telegram, gitter，微信 文字类 wps， typora, office, smartPdf 知识管理类 Mindmaster, 印象笔记 编程类 vscode, pycharm，git，JupyterNotebook, Android Studio, eclipse 影音娱乐类 网易云音乐, mpv, spotify, steam, wegame, 暴雪战网, potplayer 网络类 Chrome, firefox, ssr, idm, 讯雷 工具类 everything, utools, 护眼宝, RaiDrive, TeamViewer, pybingwp, 欧路词典, Bandizip, Snipaste, vmware 云盘类 百度云, onedriver, mega 环境类 jdk/jre, python3, node.js, Anaconda]]></content>
      <categories>
        <category>备份</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[gitCheetSheet]]></title>
    <url>%2F2019%2F05%2F04%2FgitCheetSheet%2F</url>
    <content type="text"><![CDATA[git常用命令git config user.name –查看用户名 git config user.email –查看用户邮箱 git config --global user.name –设置用户名 git config --global user.email –设置用户邮箱 git add filename/pathname/. –添加文件/文件夹/全部文件 git commit -m &#39;file describle&#39; –提交文件 git log –查询提交历史 .gitgnorey文件 –排除在版本控制之外可使用*通配符 git status –查看当前文件提交状态 git diff file–对比上一次提交与现在的改变 git reset HEAD filename/pathname/. –撤销提交 git checkout file–撤销修改在没有提交的前提下 git branch–查看分支 git branch name–创建分支 git checkout name–切换到分支name git branch -D name–删除分支name git push origin master–本地仓库同步到远程仓库origin的master分支 git fetch origin master–远程仓库同步到本地仓库存放在origin/master分支上 git merge origin/master–合并到本地当前分支 git pull origin/master–同步远程仓库并同步 git remote set-url origin git@git origin name–设置远程分支]]></content>
      <categories>
        <category>备份</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
