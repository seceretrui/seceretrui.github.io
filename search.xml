<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[刷题常用到DFS和BFS是个啥?]]></title>
    <url>%2F2020%2F03%2F24%2F%E5%88%B7%E9%A2%98%E5%B8%B8%E7%94%A8%E5%88%B0DFS%E5%92%8CBFS%E6%98%AF%E4%B8%AA%E5%95%A5%2F</url>
    <content type="text"><![CDATA[刷题常用的DFS和BFS是个啥 ？先来看一道题吧题号【Leetcode】200. Number of Islands题目如下所示 Given a 2d grid map of &#39;1&#39;s (land) and &#39;0&#39;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Example 1: 1234567Input:11110110101100000000Output: 1 Example 2: 1234567Input:11000110000010000011Output: 3 经常刷题的朋友肯定做过，大概意思就是一个字符数组中连成一片的’1‘有多少个，连成一片的算一个。 看到这道题首先想到的就是模拟移动，我们随意选一个点，首先判断这个点是不是’1’，然后开始上下左右的移动，假设点坐标为（i，j)向上（i, j-1)向下（i+1,j)向左（i, j-1), 向右（i, j+1)，但是不能越界，不能超出了数组的边界，我们把移动过的点改为’0’，将其标记为走过，不断深入直到周围全是’0’了就停止了，这样我们就完成了一次统计。接下来就很简单了，只要重复上面的方式将整个数组遍历完就可以得到结果。Java代码如下所示： 123456789101112131415161718192021222324252627282930class Solution &#123; public int numIslands(char[][] grid) &#123; if (grid == null || grid.length==0 || grid[0].length==0) return 0; int row = grid.length; int col = grid[0].length; int res = 0; for (int i=0; i&lt;row; i++) &#123; for (int j=0; j&lt;col; j++) &#123; if (grid[i][j] == '1') &#123; res++; backTrack(grid, i, j, row, col); &#125; &#125; &#125; return res; &#125; public void backTrack(char[][] grid, int i, int j, int row, int col) &#123; if (i &lt; row &amp;&amp; j &lt; col &amp;&amp; i&gt;=0 &amp;&amp; j&gt;=0) &#123; if (grid[i][j] == '1') &#123; grid[i][j] = '0'; backTrack(grid, i, j+1, row, col); backTrack(grid, i+1, j, row, col); backTrack(grid, i, j-1, row, col); backTrack(grid, i-1, j, row, col); &#125; &#125; &#125;&#125; DFS(Depth First Search)事实上，深度优先搜索属于图算法的一种，英文缩写为DFS即Depth First Search.其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次.，其实上面所做的就是一次dfs,是不是有了点感觉了。实现dfs的过程一般伴随着回溯，一般使用递归来实现，也可以用栈来替代递归。 BFS(Breadth-first search)我们下面用BFS的方式再来做一遍,于DFS思路的区别是我们对这个点四周不断扩散，而不是向它的某一边一直深入再深入另一边，我们可以使用一个队列来存储当前的点，将当前为‘1’的点加入队列，取出来判断四周，然后将周围为’1’的点加入队列，重复这个过程，为了避免将判断过的点重复加入队列，可以使用一个boolean数组来记录那些点已经判断过了。代码如下所示： 123456789101112131415161718192021222324252627282930313233343536373839class Solution &#123; public int numIslands(char[][] grid) &#123; if (grid == null || grid.length==0 || grid[0].length==0) return 0; int row = grid.length; int col = grid[0].length; boolean[][] visited = new boolean[row][col]; Queue&lt;int[]&gt; queue = new LinkedList&lt;&gt;(); int res = 0; for (int i=0; i&lt;row; i++) &#123; for (int j=0; j&lt;col; j++) &#123; if (grid[i][j] == '1' &amp; !visited[i][j]) &#123; res++; queue.offer(new int[] &#123;i, j&#125;); visited[i][j] = true; bfs(grid, queue, visited); &#125; &#125; &#125; return res; &#125; int[][] nums = &#123;&#123;0, 1&#125;, &#123;1, 0&#125;, &#123;-1, 0&#125;, &#123;0, -1&#125;&#125;; public void bfs(char[][] grid, Queue&lt;int[]&gt; queue, boolean[][] visited) &#123; int row = grid.length; int col = grid[0].length; while (!queue.isEmpty()) &#123; int[] cur = queue.poll(); for (int[] num : nums) &#123; int x = cur[0] + num[0]; int y = cur[1] + num[1]; if (x &lt; 0 || x &gt;= row || y &lt; 0 || y &gt;= col || visited[x][y]==true || grid[x][y] == '0') continue; visited[x][y] = true; queue.offer(new int[] &#123;x, y&#125;); &#125; &#125; &#125;&#125; 就这到题来说BFS感觉有点复杂了，BFS，其英文全称是Breadth First Search。 BFS并不使用经验法则算法。从算法的观点，所有因为展开节点而得到的子节点都会被加进一个先进先出的队列中，这是百度百科的定义。bfs一般用队列实现，BFS在求解最短路径或者最短步数上有很多的应用。应用最多的是在走迷宫上。可以尝试解决一下下面的问题： 在一个nn的矩阵里走，从原点（0,0）开始走到终点（n-1,n-1），只能上下左右4个方向走，只能在给定的矩阵里走，求最短步数。nn是01矩阵，0代表该格子没有障碍，为1表示有障碍物。 习题给出一些我做过的运用了BFS/DFS及回溯的习题，大家可以做一下: Leetcode[100] Leetcode[101] 牛客网[机器人的运动范围] 牛客网[矩阵中的路径] 希望大家给点意见啊，才开始刷题的萌新！！！谢谢给位大佬了╭(●｀∀´●)╯]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring源码分析]]></title>
    <url>%2F2020%2F03%2F19%2Fspring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[spring源码分析 spring的循环依赖 spring bean的生命周期 spring bean实例化 依赖注入功能的实现 初始化bean]]></content>
      <categories>
        <category>spring java</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo相关操作]]></title>
    <url>%2F2019%2F12%2F26%2Fhexo%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[hexo 常用操作配置相关hexo s–启动服务在本地端口hexo g–生成静态页面hexo d–部署服务hexo d -g–部署并生成静态页面 写作相关hexo new [layout] &lt;title&gt;–创建一篇文章根据文章类型存放在不同路径 layout path post source/_posts page source draft source/_drafts 常用文章参数，就是文章最上面的一些键值对title：默认为文章创建的名字data: 默认为文章创建时的时间tags: 标签用于标识文章，可以有多个，title: [][]或categories: 分类用于分类文章，可以有多个， categories: [][] 主题相关hexo全局配置文件_config.yml主题配置文件themes\config.yml修改主题在layout文件夹下，采用的是swig模板语法，根据需要去改动]]></content>
      <categories>
        <category>备份</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot-JPA]]></title>
    <url>%2F2019%2F09%2F29%2Fspringboot-JPA%2F</url>
    <content type="text"><![CDATA[初识springboot JPAJPA概念 JPA(Java Persistence API)是Sun官方提出的Java持久化规范，用来方便大家操作数据库。真正干活的可能是Hibernate,TopLink等等实现了JPA规范的不同厂商,默认是Hibernate。 创建数据表123456789create database jpaTest;use jpaTest;create table category_ ( id int(14) not null auto_increment, name varchar(30), primary key(id)) insert into category_ values(null,&apos;category 1&apos;);insert into category_ values(null,&apos;category 2&apos;); 创建springboot项目以Maven的方式创建springboot项目 application.properties添加配置文件1234567spring.mvc.view.prefix=/WEB-INF/jsp/spring.mvc.view.suffix=.jspspring.datasource.url=jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=adminspring.datasource.driver-class-name=com.mysql.jdbc.Driverspring.jpa.properties.hibernate.hbm2ddl.auto=update pom.xml添加依赖文件123456789101112&lt;!-- mysql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.21&lt;/version&gt; &lt;/dependency&gt; &lt;!-- jpa --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; 创建springboot启动类12345678@SpringBootApplicationpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125; &#125; ​ 创建模型类Category12345678910111213141516171819202122232425262728@Entity@Table(name="category_")public class Category &#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name="id") private int id; @Column(name="name") private String name; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; &#125; 创建DAO类CategoryDAO1public interface CategoryDAO extends JpaRepository&lt;Category,Integer&gt; &#123;&#125; 创建Controller类CategoryController12345678910111213@Controllerpublic class CategoryController &#123; @Autowired CategoryDAO categoryDAO; @RequestMapping("/listCategory") public String listCategory(Model m) throws Exception &#123; List&lt;Category&gt; cs = categoryDAO.findAll(); m.addAttribute("cs", cs); return "listCategory"; &#125;&#125; 创建显示页面listCategory.jsp1234567891011121314151617&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%&gt;&lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;c:forEach items="$&#123;cs&#125;" var="c" varStatus="st"&gt; &lt;tr&gt; &lt;td&gt;$&#123;c.id&#125;&lt;/td&gt; &lt;td&gt;$&#123;c.name&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/table&gt; 运行启动类打开浏览器验证总结：通过继承JpaRepository，我们不用自已再去实现crud等方法，直接调用JpaRepository给我们的方法就行了。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python正则备忘]]></title>
    <url>%2F2019%2F05%2F27%2Fpython%E6%AD%A3%E5%88%99%E5%A4%87%E5%BF%98%2F</url>
    <content type="text"><![CDATA[python正则备忘python正则常用方法python通过re模块实现了完整的正则表达示，通过import re引入 参数pattern –匹配模式string –原字符串flags –可选标志 查找字符串re.match(pattern, string, flags=0)仅匹配开头，成功返回re.Match object,失败则返回None re.search(pattern, string, flags=0)匹配整个字符串仅一次只要成功就不再匹配后面，成功返回re.Match object,若失败则返回None pattern.findall(string[, pos[, endpos]])匹配整个字符串所有符合匹配模式的字符串，返回re.Match object,失败返回None re.finditer(pattern, string, flags=0)匹配整个字符串，返回可迭代对像，匹配成功可迭代re.Match object, 匹配失败为None 替换字符串re.sub(patttern, repl, string, count=0, flags=0)将模式匹配字符串替换为repl中的字符串 re.split(pattern, string[, maxsplit=0, flags=0])将字符串按模式匹配分割 正则表达示对像re.Match objectobject.span() 返回匹配的索引元组object.group() 返回匹配的字符串object.start() 返回开始索引object.end() 返回结束索引 re.compile生成pattern对像，用以描述要匹配的字符串]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我的软件清单]]></title>
    <url>%2F2019%2F05%2F13%2F%E6%88%91%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95%2F</url>
    <content type="text"><![CDATA[日常使用随着电脑用的时间越来越久，软件也装的越来越多，看见好玩的，都会下载下来，虽然不久就遗忘了或卸载了，但随着电脑重装次数的变多，装这些软件都够费时间的，所以整理一下。 通讯类: qq, telegram, gitter，微信 文字类 wps， typora, office, smartPdf 知识管理类 Mindmaster, 印象笔记 编程类 vscode, pycharm，git，JupyterNotebook, Android Studio, eclipse 影音娱乐类 网易云音乐, mpv, spotify, steam, wegame, 暴雪战网, potplayer 网络类 Chrome, firefox, ssr, idm, 讯雷 工具类 everything, utools, 护眼宝, RaiDrive, TeamViewer, pybingwp, 欧路词典, Bandizip, Snipaste, vmware 云盘类 百度云, onedriver, mega 环境类 jdk/jre, python3, node.js, Anaconda]]></content>
      <categories>
        <category>备份</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[gitCheetSheet]]></title>
    <url>%2F2019%2F05%2F04%2FgitCheetSheet%2F</url>
    <content type="text"><![CDATA[git常用命令git config user.name –查看用户名 git config user.email –查看用户邮箱 git config --global user.name –设置用户名 git config --global user.email –设置用户邮箱 git add filename/pathname/. –添加文件/文件夹/全部文件 git commit -m &#39;file describle&#39; –提交文件 git log –查询提交历史 .gitgnorey文件 –排除在版本控制之外可使用*通配符 git status –查看当前文件提交状态 git diff file–对比上一次提交与现在的改变 git reset HEAD filename/pathname/. –撤销提交 git checkout file–撤销修改在没有提交的前提下 git branch–查看分支 git branch name–创建分支 git checkout name–切换到分支name git branch -D name–删除分支name git push origin master–本地仓库同步到远程仓库origin的master分支 git fetch origin master–远程仓库同步到本地仓库存放在origin/master分支上 git merge origin/master–合并到本地当前分支 git pull origin/master–同步远程仓库并同步 git remote set-url origin git@git origin name–设置远程分支]]></content>
      <categories>
        <category>备份</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
